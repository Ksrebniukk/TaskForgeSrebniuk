// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  username   String      @unique
  email      String      @unique
  password   String
  fullNmae   String      @map("full_name")
  members    Member[]
  developers Developer[]

  @@map("users")
}

enum Status {
  COMPLETED
  IN_PROGRESS
}

model Project {
  id      String   @id @default(uuid())
  name    String
  status  Status
  members Member[]
  tasks   Task[]

  @@map("projects")
}

model Member {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @map("user_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @map("project_id")
  role      Role?

  @@map("members")
}

model Role {
  id       String @id @default(uuid())
  name     String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String @unique @map("member)id")

  @@map("roles")
}

model Task {
  id          String      @id @default(uuid())
  name        String
  description String
  status      Status
  price       String
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String      @map("project_id")
  developers  Developer[]

  @@map("tasks")
}

enum DeveloperStatus {
  ONLINE
  OFFLINE
}

model Developer {
  id     String          @id @default(uuid())
  name   String
  status DeveloperStatus
  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String          @map("user_id")
  task   Task            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String          @map("task_id")

  @@map("developrs")
}
